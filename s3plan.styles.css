/* In s3plan_styles.css */

/* ... (other styles like .s3plan-page-container, .s3plan-header, #sidebar etc. remain) ... */

/* NEW Styles for Square Map Viewport */
#map-viewport-container {
    flex-grow: 1; /* Allow it to take available space in the flex row */
    display: flex;
    justify-content: center; /* Center the square viewport if space allows */
    align-items: center;    /* Center the square viewport if space allows */
    padding: 20px; /* Padding around the viewport itself */
    overflow: hidden; /* Hide anything outside the conceptual container */
}

#map-viewport {
    width: 70vh; /* Example: 70% of viewport height */
    height: 70vh; /* Make it square */
    /* OR use a fixed size like:
    width: 600px;
    height: 600px; 
    */
    max-width: 100%; /* Don't exceed parent's width */
    max-height: 800px; /* Optional: A max pixel height */
    position: relative; /* For potential absolute positioning of map inside */
    background-color: #e0e0e0; /* Background for the square viewport area */
    border: 2px solid #aaa;
    box-shadow: 0 0 10px rgba(0,0,0,0.1) inset;
    display: flex; /* To center map-area if it's smaller */
    justify-content: center;
    align-items: center;
}

#map-area {
    /* map-area will now be the direct child of map-viewport */
    /* It will contain the table and manage scrolling if table is larger than viewport */
    max-width: 100%;  /* Can't be wider than viewport */
    max-height: 100%; /* Can't be taller than viewport */
    overflow: auto;   /* IMPORTANT: Add scrollbars if map-grid is larger */
}

#map-grid {
    border-collapse: collapse;
    /* The table will size naturally based on its cells.
       It should not have width: 100% or height: 100% of map-area
       unless you want it to stretch non-uniformly.
       margin: 0 auto; will center it within map-area if map-area is larger.
    */
    margin: 0; /* Or margin: auto to center if #map-area is bigger than table */
}

/* Square cells using aspect-ratio (preferred) */
#map-grid th,
#map-grid td {
    border: 1px solid #ccc;
    width: 50px;  /* Base width for cells. Adjust this value! */
    aspect-ratio: 1 / 1; /* Makes height equal to width */
    padding: 4px;
    text-align: center;
    vertical-align: middle; /* Changed to middle for better centering in square */
    font-size: 0.6em; /* Adjust for content fitting */
    box-sizing: border-box;
    background-color: #fff;
    overflow: hidden; /* Crucial for preventing content spill */
}

/* Styles for header cells, empty cells, map-cell-content, etc.
   from previous "square cell" example largely remain the same.
   You'll need to fine-tune font sizes and padding for the new cell width (e.g., 50px).
*/

#map-grid th {
    background-color: #e9ecef;
    font-weight: bold;
    font-size: 0.65em; /* Adjust */
}

#map-grid td.empty-cell {
    background-color: #f5f5f5;
    /* Spacers also become square if they use the same width + aspect-ratio */
    /* If you want different spacer width:
    width: 10px;
    height: 50px; // Match data cell height for alignment
    aspect-ratio: unset; // Or specific aspect ratio for the spacer
    */
}

#map-body td:first-child { /* Row letters A, B, C... */
    background-color: #e9ecef;
    font-weight: bold;
    /* width: 30px; // If you want them narrower than data cells
    height: 50px; // Match data cell height
    aspect-ratio: unset; */
}

.map-cell-content {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100%;
    padding: 1px; /* Minimal padding inside content div */
    text-align: center;
}

.cell-level-type {
    font-weight: bold;
    font-size: 0.95em; /* Relative to td's 0.6em */
    line-height: 1.1;
}
.cell-coords, .cell-status {
    font-size: 0.85em; /* Relative to td's 0.6em */
    line-height: 1.1;
}
.cell-status { color: #28a745; }
